# different genre
geom_smooth(data = musical_diffs %>% filter(same_genre == 0),
method = 'lm', alpha = 0.15, linewidth = 0.5,
color = 'black') +
#color = '#33A02C', fill = '#33A02C') +
theme_light() +
xlab('MFCC distance') +
ylab('mean similarity rating') +
theme(axis.title.x = element_text(color = '#33A02C', size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)) +
scale_y_continuous(limits = c(1.9, 7), breaks = seq(2,7)) +
# make genre black and white
scale_fill_manual(breaks = c(0,1), values = c('black', 'yellow'))
ggplot(musical_diffs, aes(x = mfccs_dist, y = mean_sim, fill = factor(same_genre))) +
geom_point(size = 3, alpha = 1, pch = 21) +
# same genre
geom_smooth(data = musical_diffs %>% filter(same_genre == 1),
method = 'lm', alpha = 0.15, linewidth = 0.5,
color = 'black') +
#color = '#33A02C', fill = '#33A02C') +
# different genre
geom_smooth(data = musical_diffs %>% filter(same_genre == 0),
method = 'lm', alpha = 0.15, linewidth = 0.5,
color = 'black', fill = 'black') +
#color = '#33A02C', fill = '#33A02C') +
theme_light() +
xlab('MFCC distance') +
ylab('mean similarity rating') +
theme(axis.title.x = element_text(color = '#33A02C', size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)) +
scale_y_continuous(limits = c(1.9, 7), breaks = seq(2,7)) +
# make genre black and white
scale_fill_manual(breaks = c(0,1), values = c('black', 'white'))
ggplot(musical_diffs, aes(x = mfccs_dist, y = mean_sim, fill = factor(same_genre))) +
geom_point(size = 3, alpha = 1, pch = 21) +
# same genre
geom_smooth(data = musical_diffs %>% filter(same_genre == 1),
method = 'lm', alpha = 0.15, linewidth = 0.5,
color = 'black', fill = 'black') +
# different genre
geom_smooth(data = musical_diffs %>% filter(same_genre == 0),
method = 'lm', alpha = 0.15, linewidth = 0.5) +
theme_light() +
xlab('MFCC distance') +
ylab('mean similarity rating') +
theme(axis.title.x = element_text(color = '#33A02C', size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)) +
scale_y_continuous(limits = c(1.9, 7), breaks = seq(2,7)) +
# make genre black and white
scale_fill_manual(breaks = c(0,1), values = c('black', 'white'))
ggplot(musical_diffs, aes(x = mfccs_dist, y = mean_sim, fill = factor(same_genre))) +
geom_point(size = 3, alpha = 1, pch = 21) +
# same genre
geom_smooth(data = musical_diffs %>% filter(same_genre == 1),
method = 'lm', alpha = 0.15, linewidth = 0.5,
color = 'black', fill = 'black') +
# different genre
geom_smooth(data = musical_diffs %>% filter(same_genre == 0),
method = 'lm', alpha = 0.15, linewidth = 0.5,
color = 'black') +
theme_light() +
xlab('MFCC distance') +
ylab('mean similarity rating') +
theme(axis.title.x = element_text(color = '#33A02C', size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)) +
scale_y_continuous(limits = c(1.9, 7), breaks = seq(2,7)) +
# make genre black and white
scale_fill_manual(breaks = c(0,1), values = c('black', 'white'))
ggplot(musical_diffs, aes(x = mfccs_dist, y = mean_sim, fill = factor(same_genre))) +
geom_point(size = 3, alpha = 1, pch = 21) +
# same genre
geom_smooth(data = musical_diffs %>% filter(same_genre == 1),
method = 'lm', alpha = 0.15, linewidth = 0.5,
color = 'black', fill = 'black') +
# different genre
geom_smooth(data = musical_diffs %>% filter(same_genre == 0),
method = 'lm', alpha = 0.15, linewidth = 0.5,
color = 'black') +
theme_light() +
xlab('MFCC distance') +
ylab('mean similarity rating') +
theme(axis.title.x = element_text(color = '#33A02C', size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)) +
scale_y_continuous(limits = c(1.9, 7), breaks = seq(2,7)) +
# make genre black and white
scale_fill_manual(breaks = c(0,1), values = c('black', 'white'),
name = "", labels = 'different genre', 'same genre')
ggplot(musical_diffs, aes(x = mfccs_dist, y = mean_sim, fill = factor(same_genre))) +
geom_point(size = 3, alpha = 1, pch = 21) +
# same genre
geom_smooth(data = musical_diffs %>% filter(same_genre == 1),
method = 'lm', alpha = 0.15, linewidth = 0.5,
color = 'black', fill = 'black') +
# different genre
geom_smooth(data = musical_diffs %>% filter(same_genre == 0),
method = 'lm', alpha = 0.15, linewidth = 0.5,
color = 'black') +
theme_light() +
xlab('MFCC distance') +
ylab('mean similarity rating') +
theme(axis.title.x = element_text(color = '#33A02C', size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)) +
scale_y_continuous(limits = c(1.9, 7), breaks = seq(2,7)) +
# make genre black and white
scale_fill_manual(breaks = c(0,1), values = c('black', 'white'),
name = "", labels = c('different genre', 'same genre'))
ggplot(musical_diffs, aes(x = mfccs_dist, y = mean_sim, fill = factor(same_genre))) +
geom_point(size = 3, alpha = 1, pch = 21) +
# different genre
geom_smooth(data = musical_diffs %>% filter(same_genre == 0),
method = 'lm', alpha = 0.15, linewidth = 0.5,
color = 'black') +
# same genre
geom_smooth(data = musical_diffs %>% filter(same_genre == 1),
method = 'lm', alpha = 0.15, linewidth = 0.5,
color = 'black', fill = 'black') +
theme_light() +
xlab('MFCC distance') +
ylab('mean similarity rating') +
theme(axis.title.x = element_text(color = '#33A02C', size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)) +
scale_y_continuous(limits = c(1.9, 7), breaks = seq(2,7)) +
# make genre black and white
scale_fill_manual(breaks = c(0,1), values = c('black', 'white'),
name = "", labels = c('different genre', 'same genre'))
ggplot(musical_diffs, aes(x = mfccs_dist, y = mean_sim, fill = factor(same_genre))) +
geom_point(size = 3, alpha = 1, pch = 21) +
# different genre
geom_smooth(data = musical_diffs %>% filter(same_genre == 0),
method = 'lm', alpha = 0.15, linewidth = 0.5,
color = 'black') +
# same genre
geom_smooth(data = musical_diffs %>% filter(same_genre == 1),
method = 'lm', alpha = 0.15, linewidth = 0.5,
color = 'black', fill = 'black') +
theme_light() +
xlab('MFCC distance') +
ylab('mean similarity rating') +
theme(axis.title.x = element_text(color = '#33A02C', size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)) +
scale_y_continuous(limits = c(1.9, 7), breaks = seq(2,7)) +
# make genre black and white
scale_fill_manual(breaks = c(0,1), values = c('black', 'white'),
name = "", labels = c('different genre', 'same genre'))
ggsave('../figures/timbre_genre.png', width = 5, height = 5)
summary(lm(mean_sim ~ tempo_difference*same_genre, musical_diffs_scaled))
summary(lm(mean_sim ~ key_difference*same_genre, musical_diffs_scaled))
summary(lm(mean_sim ~ voice_type_difference*same_genre, musical_diffs_scaled))
summary(lm(mean_sim ~ mfccs_dist*same_genre, musical_diffs_scaled))
ggplot(musical_diffs, aes(x = tempo_difference, y = mean_sim, fill = factor(same_genre))) +
geom_point(size = 3, alpha = 1, pch = 21) +
# different genre
geom_smooth(data = musical_diffs %>% filter(same_genre == 0),
method = 'lm', alpha = 0.15, linewidth = 0.5,
color = 'black') +
# same genre
geom_smooth(data = musical_diffs %>% filter(same_genre == 1),
method = 'lm', alpha = 0.15, linewidth = 0.5,
color = 'black', fill = 'black') +
theme_light() +
xlab('tempo difference') +
ylab('mean similarity rating') +
theme(axis.title.x = element_text(color = '#825AA9', size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)) +
scale_y_continuous(limits = c(1.9, 7), breaks = seq(2,7)) +
# make genre black and white
scale_fill_manual(breaks = c(0,1), values = c('black', 'white'),
name = "", labels = c('different genre', 'same genre'))
#ggsave('../figures/tempo_genre.png', width = 5, height = 5)
ggplot(musical_diffs, aes(x = tempo_difference, y = mean_sim, fill = factor(same_genre))) +
geom_point(size = 3, alpha = 0.7, pch = 21) +
# different genre
geom_smooth(data = musical_diffs %>% filter(same_genre == 0),
method = 'lm', alpha = 0.15, linewidth = 0.5,
color = 'black') +
# same genre
geom_smooth(data = musical_diffs %>% filter(same_genre == 1),
method = 'lm', alpha = 0.15, linewidth = 0.5,
color = 'black', fill = 'black') +
theme_light() +
xlab('tempo difference') +
ylab('mean similarity rating') +
theme(axis.title.x = element_text(color = '#825AA9', size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)) +
scale_y_continuous(limits = c(1.9, 7), breaks = seq(2,7)) +
# make genre black and white
scale_fill_manual(breaks = c(0,1), values = c('black', 'white'),
name = "", labels = c('different genre', 'same genre'))
#ggsave('../figures/tempo_genre.png', width = 5, height = 5)
ggplot(musical_diffs, aes(x = mfccs_dist, y = mean_sim, fill = factor(same_genre))) +
geom_point(size = 3, alpha = 0.8, pch = 21) +
# different genre
geom_smooth(data = musical_diffs %>% filter(same_genre == 0),
method = 'lm', alpha = 0.15, linewidth = 0.5,
color = 'black') +
# same genre
geom_smooth(data = musical_diffs %>% filter(same_genre == 1),
method = 'lm', alpha = 0.15, linewidth = 0.5,
color = 'black', fill = 'black') +
theme_light() +
xlab('MFCC distance') +
ylab('mean similarity rating') +
theme(axis.title.x = element_text(color = '#33A02C', size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)) +
scale_y_continuous(limits = c(1.9, 7), breaks = seq(2,7)) +
# make genre black and white
scale_fill_manual(breaks = c(0,1), values = c('black', 'white'),
name = "", labels = c('different genre', 'same genre'))
#ggsave('../figures/timbre_genre.png', width = 5, height = 5)
ggplot(musical_diffs, aes(x = tempo_difference, y = mean_sim, fill = factor(same_genre))) +
geom_point(size = 3, alpha = 0.8, pch = 21) +
# different genre
geom_smooth(data = musical_diffs %>% filter(same_genre == 0),
method = 'lm', alpha = 0.15, linewidth = 0.5,
color = 'black') +
# same genre
geom_smooth(data = musical_diffs %>% filter(same_genre == 1),
method = 'lm', alpha = 0.15, linewidth = 0.5,
color = 'black', fill = 'black') +
theme_light() +
xlab('tempo difference') +
ylab('mean similarity rating') +
theme(axis.title.x = element_text(color = '#825AA9', size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)) +
scale_y_continuous(limits = c(1.9, 7), breaks = seq(2,7)) +
# make genre black and white
scale_fill_manual(breaks = c(0,1), values = c('black', 'white'),
name = "", labels = c('different genre', 'same genre'))
#ggsave('../figures/tempo_genre.png', width = 5, height = 5)
ggplot(musical_diffs, aes(x = abs(tempo_difference), y = mean_sim, fill = factor(same_genre))) +
geom_point(size = 3, alpha = 0.8, pch = 21) +
# different genre
geom_smooth(data = musical_diffs %>% filter(same_genre == 0),
method = 'lm', alpha = 0.15, linewidth = 0.5,
color = 'black') +
# same genre
geom_smooth(data = musical_diffs %>% filter(same_genre == 1),
method = 'lm', alpha = 0.15, linewidth = 0.5,
color = 'black', fill = 'black') +
theme_light() +
xlab('tempo difference') +
ylab('mean similarity rating') +
theme(axis.title.x = element_text(color = '#825AA9', size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)) +
scale_y_continuous(limits = c(1.9, 7), breaks = seq(2,7)) +
# make genre black and white
scale_fill_manual(breaks = c(0,1), values = c('black', 'white'),
name = "", labels = c('different genre', 'same genre'))
#ggsave('../figures/tempo_genre.png', width = 5, height = 5)
ggplot(musical_diffs, aes(x = abs(tempo_difference), y = mean_sim, fill = factor(same_genre))) +
geom_point(size = 3, alpha = 0.8, pch = 21) +
# different genre
geom_smooth(data = musical_diffs %>% filter(same_genre == 0),
method = 'lm', alpha = 0.15, linewidth = 0.5,
color = 'black') +
# same genre
geom_smooth(data = musical_diffs %>% filter(same_genre == 1),
method = 'lm', alpha = 0.15, linewidth = 0.5,
color = 'black', fill = 'black') +
theme_light() +
xlab('tempo difference') +
ylab('mean similarity rating') +
theme(axis.title.x = element_text(color = '#825AA9', size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)) +
scale_y_continuous(limits = c(1.9, 7), breaks = seq(2,7)) +
# make genre black and white
scale_fill_manual(breaks = c(0,1), values = c('black', 'white'),
name = "", labels = c('different genre', 'same genre'))
ggsave('../figures/tempo_genre.png', width = 5, height = 5)
ggplot(musical_diffs, aes(x = abs(tempo_difference), y = mean_sim, fill = factor(same_genre))) +
geom_point(size = 3, alpha = 0.8, pch = 21) +
# different genre
geom_smooth(data = musical_diffs %>% filter(same_genre == 0),
method = 'lm', alpha = 0.15, linewidth = 0.5,
color = 'black') +
# same genre
geom_smooth(data = musical_diffs %>% filter(same_genre == 1),
method = 'lm', alpha = 0.15, linewidth = 0.5,
color = 'black', fill = 'black') +
theme_light() +
xlab('tempo difference') +
ylab('mean similarity rating') +
theme(axis.title.x = element_text(color = '#825AA9', size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)) +
scale_y_continuous(limits = c(1.9, 7), breaks = seq(2,7)) +
# make genre black and white
scale_fill_manual(breaks = c(0,1), values = c('black', 'white'),
name = "", labels = c('different genre', 'same genre'))
ggsave('../figures/tempo_genre.png', width = 6, height = 5)
ggplot(musical_diffs, aes(x = mfccs_dist, y = mean_sim, fill = factor(same_genre))) +
geom_point(size = 3, alpha = 0.8, pch = 21) +
# different genre
geom_smooth(data = musical_diffs %>% filter(same_genre == 0),
method = 'lm', alpha = 0.15, linewidth = 0.5,
color = 'black') +
# same genre
geom_smooth(data = musical_diffs %>% filter(same_genre == 1),
method = 'lm', alpha = 0.15, linewidth = 0.5,
color = 'black', fill = 'black') +
theme_light() +
xlab('MFCC distance') +
ylab('mean similarity rating') +
theme(axis.title.x = element_text(color = '#33A02C', size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)) +
scale_y_continuous(limits = c(1.9, 7), breaks = seq(2,7)) +
# make genre black and white
scale_fill_manual(breaks = c(0,1), values = c('black', 'white'),
name = "", labels = c('different genre', 'same genre'))
ggsave('../figures/timbre_genre.png', width = 6, height = 5)
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
library(corrplot)
library(tidyverse)
library(magrittr)
library(corrplot)
library(broom)
diffs_PCs <- read_csv('../../data/processed/expanded/joined_with_features/acoustic_diffs_PCs_noMFCCs.csv')
corr_matrix_PCs <- cor(diffs_PCs[-1])
corrplot(corr_matrix_PCs, type = 'upper',
tl.col = 'black', tl.srt = 45)
sim_ratings <- read_csv('../../data/processed/expanded/joined_with_features/similarity_and_feature_scaled_differences.csv')
sim_ratings %<>% select(c(song_id, mean_sim))
diffs_PCs %<>%
left_join(sim_ratings, ., by=join_by(song_id))
# code adapted from this post: https://stackoverflow.com/questions/54907726/running-multiple-linear-regressions-across-several-columns-of-a-data-frame-in-r
individual_models <- diffs_PCs %>%
select(-song_id) %>%
pivot_longer(cols = -mean_sim,
names_to = 'column', values_to = 'value') %>%
nest(data = -column) %>% # this gives us one model per PC
# each column gets a tibble with mean_sim and value as columns
mutate(model = map(data, ~lm(mean_sim ~ value, data = .))) %>% # run the models
mutate(tidy_model = map(model, tidy)) %>% # tidy the models
select(-data, -model) %>% # remove untidy models
unnest(cols = c(tidy_model))
print(individual_models)
# help from here: https://stackoverflow.com/questions/67665340/incorporate-all-columns-of-a-dataframe-into-one-regression
model20 <- diffs_PCs %>%
select(-song_id) %>%
lm(mean_sim ~ ., data = .) # first . means all other columns
summary(model20)
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
library(tidyverse)
library(magrittr)
library(corrplot)
features <- read_csv('../../data/processed/expanded/joined_with_features/all_features.csv')
feature_diffs <- read_csv('../../data/processed/expanded/joined_with_features/similarity_and_feature_differences.csv')
feature_diffs_scaled <- read_csv('../../data/processed/expanded/joined_with_features/similarity_and_feature_scaled_differences.csv')
musical_feat <- features %>% select(1, 22:26)
musical_diffs <- feature_diffs %>% select(1:3, 24:29)
musical_diffs_scaled <- feature_diffs_scaled %>% select(1:2, 23:28)
genre <- features %>%
select(song_id, genre) %>%
separate_wider_delim(cols = song_id, delim = '_',
names = c('title', 'artist', 'orig_or_cover')) %>%
mutate(song_id = paste(title, artist, sep = '_')) %>%
mutate(title = NULL, artist = NULL) %>%
pivot_wider(id_cols = song_id, names_from = orig_or_cover, values_from = genre) %>%
mutate(same_genre = ifelse(Cover5S == Original5S, 1, 0))
genre %>%
filter(same_genre == 1)
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
library(tidyverse)
library(magrittr)
library(corrplot)
features <- read_csv('../../data/processed/expanded/joined_with_features/all_features.csv')
feature_diffs <- read_csv('../../data/processed/expanded/joined_with_features/similarity_and_feature_differences.csv')
feature_diffs_scaled <- read_csv('../../data/processed/expanded/joined_with_features/similarity_and_feature_scaled_differences.csv')
musical_feat <- features %>% select(1, 22:26)
musical_diffs <- feature_diffs %>% select(1:3, 24:29)
musical_diffs_scaled <- feature_diffs_scaled %>% select(1:2, 23:28)
genre <- features %>%
select(song_id, genre) %>%
separate_wider_delim(cols = song_id, delim = '_',
names = c('title', 'artist', 'orig_or_cover')) %>%
mutate(song_id = paste(title, artist, sep = '_')) %>%
mutate(title = NULL, artist = NULL) %>%
pivot_wider(id_cols = song_id, names_from = orig_or_cover, values_from = genre) %>%
mutate(same_genre = ifelse(Cover5S == Original5S, 1, 0))
genre %>%
filter(same_genre == 1)
musical_diffs <- genre %>%
select(song_id, same_genre) %>%
left_join(musical_diffs, ., by = join_by(song_id))
musical_diffs_scaled <- genre %>%
select(song_id, same_genre) %>%
left_join(musical_diffs_scaled, ., by = join_by(song_id))
musical_diffs %<>%
select(-c(treble_difference, tbb_difference))
corr_matrix <- cor(musical_diffs[-seq(1:3)]) # leave out song_id, similarity
corrplot(corr_matrix, type = 'upper', # upper triangle
method = 'number',
order = 'hclust', # automatically orders with hierarchical clustering
tl.col = 'black', tl.srt = 45) # specify text color and rotation
summary(lm(tempo_difference ~ same_genre, musical_diffs_scaled))
summary(lm(tempo_difference ~ same_genre, musical_diffs_scaled))
summary(lm(key_difference ~ same_genre, musical_diffs_scaled))
summary(lm(voice_type_difference ~ same_genre, musical_diffs_scaled))
summary(lm(mfccs_dist ~ same_genre, musical_diffs_scaled))
ggplot(musical_diffs_scaled, aes(x = same_genre, y = mfccs_dist)) +
geom_point()
ggplot(musical_diffs_scaled, aes(x = same_genre, y = mfccs_dist)) +
geom_point() +
geom_smooth(method = 'lm')
ggplot(musical_diffs_scaled, aes(x = same_genre, y = mfccs_dist)) +
geom_jitter() +
geom_smooth(method = 'lm')
ggplot(musical_diffs_scaled, aes(x = same_genre, y = mfccs_dist)) +
geom_jitter(wdith = .1) +
geom_smooth(method = 'lm')
ggplot(musical_diffs_scaled, aes(x = same_genre, y = mfccs_dist)) +
geom_jitter(width = .1) +
geom_smooth(method = 'lm')
summary(lm(mean_sim ~ tempo_difference, musical_diffs_scaled))
summary(lm(mean_sim ~ key_difference, musical_diffs_scaled))
summary(lm(mean_sim ~ voice_type_difference, musical_diffs_scaled))
summary(lm(mean_sim ~ mfccs_dist, musical_diffs_scaled))
summary(lm(mean_sim ~ same_genre, musical_diffs_scaled))
summary(lm(mean_sim ~ tempo_difference*same_genre, musical_diffs_scaled))
summary(lm(mean_sim ~ key_difference*same_genre, musical_diffs_scaled))
summary(lm(mean_sim ~ voice_type_difference*same_genre, musical_diffs_scaled))
summary(lm(mean_sim ~ mfccs_dist*same_genre, musical_diffs_scaled))
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
library(tidyverse)
library(magrittr)
#library(RColorBrewer)
library(viridis)
features <- read_csv('../../data/processed/expanded/joined_with_features/all_features.csv')
feature_diffs <- read_csv('../../data/processed/expanded/joined_with_features/similarity_and_feature_differences.csv')
feature_diffs_scaled <- read_csv('../../data/processed/expanded/joined_with_features/similarity_and_feature_scaled_differences.csv')
emot_feat <- features %>% select(1, 27:30)
emot_feat_diffs <- feature_diffs %>% select(1:2, 30:31)
emot_feat_diffs_scaled <- feature_diffs_scaled %>% select(1:2, 29:30)
genre <- features %>%
select(song_id, genre) %>%
separate_wider_delim(cols = song_id, delim = '_',
names = c('title', 'artist', 'orig_or_cover')) %>%
mutate(song_id = paste(title, artist, sep = '_')) %>%
mutate(title = NULL, artist = NULL) %>%
pivot_wider(id_cols = song_id, names_from = orig_or_cover, values_from = genre) %>%
mutate(same_genre = ifelse(Cover5S == Original5S, 1, 0))
emot_feat_diffs <- genre %>%
select(song_id, same_genre) %>%
left_join(musical_diffs, ., by = join_by(song_id))
emot_feat_diffs_scaled <- genre %>%
select(song_id, same_genre) %>%
left_join(musical_diffs_scaled, ., by = join_by(song_id))
summary(lm(mean_valence ~ same_genre, emot_feat_diffs))
View(emot_feat_diffs)
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
library(tidyverse)
library(magrittr)
#library(RColorBrewer)
library(viridis)
features <- read_csv('../../data/processed/expanded/joined_with_features/all_features.csv')
feature_diffs <- read_csv('../../data/processed/expanded/joined_with_features/similarity_and_feature_differences.csv')
feature_diffs_scaled <- read_csv('../../data/processed/expanded/joined_with_features/similarity_and_feature_scaled_differences.csv')
emot_feat <- features %>% select(1, 27:30)
emot_feat_diffs <- feature_diffs %>% select(1:2, 30:31)
emot_feat_diffs_scaled <- feature_diffs_scaled %>% select(1:2, 29:30)
genre <- features %>%
select(song_id, genre) %>%
separate_wider_delim(cols = song_id, delim = '_',
names = c('title', 'artist', 'orig_or_cover')) %>%
mutate(song_id = paste(title, artist, sep = '_')) %>%
mutate(title = NULL, artist = NULL) %>%
pivot_wider(id_cols = song_id, names_from = orig_or_cover, values_from = genre) %>%
mutate(same_genre = ifelse(Cover5S == Original5S, 1, 0))
emot_feat_diffs <- genre %>%
select(song_id, same_genre) %>%
left_join(emot_feat_diffs, ., by = join_by(song_id))
emot_feat_diffs_scaled <- genre %>%
select(song_id, same_genre) %>%
left_join(emot_feat_diffs_scaled, ., by = join_by(song_id))
summary(lm(mean_valence ~ same_genre, emot_feat_diffs))
summary(lm(mean_valence_difference ~ same_genre, emot_feat_diffs))
summary(lm(mean_arousal_difference ~ same_genre, emot_feat_diffs))
summary(lm(mean_valence_difference ~ same_genre, emot_feat_diffs_scaled))
summary(lm(mean_arousal_difference ~ same_genre, emot_feat_diffs_scaled))
summary(lm(mean_sim ~ mean_valence_difference*same_genre, emot_feat_diffs_scaled))
summary(lm(mean_sim ~ mean_arousal_difference*same_genre, emot_feat_diffs_scaled))
