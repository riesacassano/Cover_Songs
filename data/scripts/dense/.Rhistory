geom_jitter(width = 0.1) +
xlab('mean similarity')
ggplot(data, aes(mean_sim, memory_cover)) +
geom_jitter(width = 0.05) +
xlab('mean similarity')
ggplot(data, aes(mean_sim, memory_cover)) +
geom_jitter(height = 0.05) +
xlab('mean similarity')
ggplot(data, aes(mean_sim, memory_cover)) +
geom_jitter(height = 0.1) +
xlab('mean similarity')
ggplot(data, aes(mean_sim, memory_cover)) +
geom_jitter(height = 0.1, alpha = 0.5) +
xlab('mean similarity')
ggplot(data, aes(mean_sim, memory_cover)) +
geom_jitter(width = 0, height = 0.1, alpha = 0.5) +
xlab('mean similarity')
ggplot(data, aes(mean_sim, memory_cover)) +
geom_jitter(width = 0, height = 0.1, alpha = 0.5) +
xlab('mean similarity') +
ylab('memory evoked for cover')
ggplot(data, aes(mean_sim, memory_cover)) +
geom_jitter(width = 0, height = 0.1, alpha = 0.5) +
xlab('mean similarity') +
ylab('memory evoked for cover') +
geom_smooth(method = 'glm', color = 'black')
ggplot(data, aes(mean_sim, memory_cover)) +
geom_jitter(width = 0, height = 0.1, alpha = 0.5) +
xlab('mean similarity') +
ylab('memory evoked for cover') +
geom_smooth(method = 'glm', color = 'black',
method.args = list(family = binomial))
summary(glm(memory_cover ~ mean_sim,
data, family = binomial))
ggplot(data, aes(mean_sim, memory_cover)) +
geom_jitter(width = 0, height = 0.1, alpha = 0.5) +
xlab('mean similarity') +
ylab('memory evoked for cover') +
stat_smooth(method = 'glm', color = 'black',
method.args = list(family = binomial))
ggplot(data, aes(mean_sim, memory_cover)) +
geom_jitter(width = 0, height = 0.1, alpha = 0.5) +
xlab('mean similarity') +
ylab('memory evoked for cover') +
stat_smooth(method = 'glm', color = 'black')#,
#method.args = list(family = binomial))
ggplot(data, aes(mean_sim, memory_cover)) +
geom_jitter(width = 0, height = 0.1, alpha = 0.5) +
xlab('mean similarity') +
ylab('memory evoked for cover') +
stat_smooth(method = 'glm', color = 'black',
method.args = list(family = binomial))
str(data)
ggplot(data, aes(mean_sim, factor(memory_cover))) +
geom_jitter(width = 0, height = 0.1, alpha = 0.5) +
xlab('mean similarity') +
ylab('memory evoked for cover') +
stat_smooth(method = 'glm', color = 'black',
method.args = list(family = binomial))
data %>%
mutate(memory_cover.int = ifelse(memory_cover == 1, 1, 0) %>%
ggplot(data, aes(mean_sim, memory_cover.int)) +
geom_jitter(width = 0, height = 0.1, alpha = 0.5) +
xlab('mean similarity') +
ylab('memory evoked for cover') +
stat_smooth(method = 'glm', color = 'black',
method.args = list(family = binomial))
data %>%
mutate(memory_cover.int = ifelse(memory_cover == 1, 1, 0)) %>%
ggplot(data, aes(mean_sim, memory_cover.int)) +
geom_jitter(width = 0, height = 0.1, alpha = 0.5) +
xlab('mean similarity') +
ylab('memory evoked for cover') +
stat_smooth(method = 'glm', color = 'black',
method.args = list(family = binomial))
data %>%
mutate(memory_cover.int = ifelse(memory_cover == 1, 1, 0)) %>%
ggplot(aes(mean_sim, memory_cover.int)) +
geom_jitter(width = 0, height = 0.1, alpha = 0.5) +
xlab('mean similarity') +
ylab('memory evoked for cover') +
stat_smooth(method = 'glm', color = 'black',
method.args = list(family = binomial))
data %>%
mutate(memory_cover.int = ifelse(memory_cover == 1, 1, 0)) %>%
ggplot(aes(mean_sim, memory_cover.int)) +
geom_jitter(width = 0, height = 0.1, alpha = 0.5) +
xlab('mean similarity') +
ylab('memory evoked for cover') +
stat_smooth(method = 'lm', color = 'black',
method.args = list(family = binomial))
data %>%
mutate(memory_cover.int = ifelse(memory_cover == 1, 1, 0)) %>%
ggplot(aes(mean_sim, memory_cover.int)) +
geom_jitter(width = 0, height = 0.1, alpha = 0.5) +
xlab('mean similarity') +
ylab('memory evoked for cover') +
stat_smooth(method = 'glm', color = 'black',
method.args = list(family = binomial))
data %>%
mutate(memory_cover.int = ifelse(memory_cover == 1, 1, 0)) %>%
ggplot(aes(mean_sim, memory_cover.int)) +
geom_jitter(width = 0, height = 0.1, alpha = 0.5) +
xlab('mean similarity') +
ylab('memory evoked for cover') +
stat_smooth(method = 'glm', color = 'black',
method.args = list(family = "binomial"))
data %>%
mutate(memory_cover.int = ifelse(memory_cover == 1, 1, 0)) %>%
ggplot(aes(mean_sim, memory_cover.int)) +
geom_point() +
#geom_jitter(width = 0, height = 0.1, alpha = 0.5) +
xlab('mean similarity') +
ylab('memory evoked for cover') +
stat_smooth(method = 'glm', color = 'black',
method.args = list(family = "binomial"))
data %>%
mutate(memory_cover.int = ifelse(memory_cover == 1, 1, 0)) %>%
ggplot(aes(mean_sim, memory_cover.int)) +
geom_point() +
#geom_jitter(width = 0, height = 0.1, alpha = 0.5) +
xlab('mean similarity') +
ylab('memory evoked for cover') +
stat_smooth(method = 'glm', color = 'black',
method.args = list(family = binomial))
# testing
data %>%
mutate(test_similarity = ifelse(memory_cover, mean_sim + 2, mean_sim)) %>%
mutate(memory_cover.int = ifelse(memory_cover == 1, 1, 0)) %>%
ggplot(aes(mean_sim, memory_cover.int)) +
geom_point() +
#geom_jitter(width = 0, height = 0.1, alpha = 0.5) +
xlab('mean similarity') +
ylab('memory evoked for cover') +
stat_smooth(method = 'glm', color = 'black',
method.args = list(family = binomial))
# testing
data %>%
mutate(test_similarity = ifelse(memory_cover, mean_sim + 2, mean_sim)) %>%
mutate(memory_cover.int = ifelse(memory_cover == 1, 1, 0)) %>%
ggplot(aes(test_similarity, memory_cover.int)) +
geom_point() +
geom_jitter(width = 0, height = 0.1, alpha = 0.5) +
xlab('mean similarity') +
ylab('memory evoked for cover') +
stat_smooth(method = 'glm', color = 'black',
method.args = list(family = binomial))
# testing - manipulate to make sure plotting function is working
data %>%
mutate(test_similarity = ifelse(memory_cover, mean_sim + 2, mean_sim)) %>%
mutate(memory_cover.int = ifelse(memory_cover == 1, 1, 0)) %>%
ggplot(aes(test_similarity, memory_cover.int)) +
geom_point() +
geom_jitter(width = 0, height = 0.1, alpha = 0.5) +
xlab('FAKE similarity (for testing)') +
ylab('memory evoked for cover') +
stat_smooth(method = 'glm', color = 'black',
method.args = list(family = binomial))
data %>%
mutate(memory_cover.int = ifelse(memory_cover == 1, 1, 0)) %>%
ggplot(aes(mean_sim, memory_cover.int)) +
geom_jitter(width = 0, height = 0.1, alpha = 0.5) +
xlab('mean similarity') +
ylab('memory evoked for cover') +
stat_smooth(method = 'glm', color = 'black',
method.args = list(family = binomial))
data %>%
mutate(memory_cover.int = ifelse(memory_cover == 1, 1, 0)) %>%
ggplot(aes(tempo_difference, memory_cover.int)) +
geom_jitter(width = 0, height = 0.1, alpha = 0.5) +
xlab('tempo difference') +
ylab('memory evoked for cover') +
stat_smooth(method = 'glm', color = 'black',
method.args = list(family = binomial))
data %>%
mutate(memory_cover.int = ifelse(memory_cover == 1, 1, 0)) %>%
ggplot(aes(voice_type_difference, memory_cover.int)) +
geom_jitter(width = 0, height = 0.1, alpha = 0.5) +
xlab('voice type difference') +
ylab('memory evoked for cover') +
stat_smooth(method = 'glm', color = 'black',
method.args = list(family = binomial))
data %>%
mutate(memory_cover.int = ifelse(memory_cover == 1, 1, 0)) %>%
ggplot(aes(voice_type_difference, memory_cover.int)) +
geom_jitter(width = 0.1, height = 0.1, alpha = 0.5) +
xlab('voice type difference') +
ylab('memory evoked for cover') +
stat_smooth(method = 'glm', color = 'black',
method.args = list(family = binomial))
ggplot(data_by_song, aes(mean_sim, likelihood)) +
geom_point() +
geom_smooth(method = "lm", color = 'black') +
xlab('mean similarity per song')
ggplot(data_by_song, aes(tempo_difference, likelihood)) +
geom_point() +
geom_smooth(method = "lm", color = 'black') +
xlab('tempo difference per song')
ggplot(data_by_song_vividness, aes(x = mean_sim, y = avg_vivid_diff)) +
geom_point() +
geom_smooth(method = "lm", color = 'black')
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
library(tidyverse)
library(magrittr)
library(lme4)
library(lmerTest)
data <- read_csv('../../data/processed/dense/joined_with_features/memory_pairs.csv')
by_song <- read_csv('../../data/processed/dense/joined_with_features/similarity_and_scaled_feature_differences.csv')
ggplot(data, aes(x = mean_sim, y = control_diff)) +
geom_point(alpha = 0.5)
ggplot(data, aes(x = mean_sim, y = vivid_diff)) +
geom_point(alpha = 0.5)
ggplot(data, aes(x = mean_sim, y = abs(control_diff))) +
geom_point(alpha = 0.5)
ggplot(data, aes(x = mean_sim, y = abs(vivid_diff))) +
geom_point(alpha = 0.5)
summary(lmer(control_diff ~ mean_sim + (1 | internal_id) + (1 | song_id),
data))
summary(lmer(vivid_diff ~ mean_sim + (1 | internal_id) + (1 | song_id),
data))
data_by_song_vividness <- data %>%
group_by(song_id) %>%
summarize(avg_vivid_diff = mean(vivid_diff))
data_by_song_control <- data %>%
group_by(song_id) %>%
summarize(avg_control_diff = mean(control_diff))
data_by_song_vividness %<>%
left_join(., by_song, by = join_by(song_id))
data_by_song_control %<>%
left_join(., by_song, by = join_by(song_id))
summary(lm(avg_vivid_diff ~ mean_sim, data_by_song_vividness))
ggplot(data_by_song_vividness, aes(x = mean_sim, y = avg_vivid_diff)) +
geom_point() +
geom_smooth(method = "lm", color = 'black')
summary(lm(avg_control_diff ~ mean_sim, data_by_song_control))
ggplot(data_by_song_control, aes(x = mean_sim, y = avg_control_diff)) +
geom_point() +
geom_smooth(method = "lm", color = 'black')
ggplot(data_by_song, aes(x = mean_sim, y = prop_same)) +
geom_point() +
geom_smooth(method = "lm", color = 'black')
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
library(tidyverse)
library(magrittr)
library(lme4)
library(lmerTest)
data <- read_csv('../../data/processed/dense/joined_with_features/memory_pairs.csv')
by_song <- read_csv('../../data/processed/dense/joined_with_features/similarity_and_scaled_feature_differences.csv')
data_factor <- data %>%
filter(content != 'private') %>%
mutate(content = factor(content,
levels = c('same', 'similar', 'diff'),
labels = c('same', 'same', 'different')))
ggplot(data, aes(x = content, y = semantic_distance)) +
geom_jitter(width = 0.25)
ggplot(data_factor, aes(x = content, y = semantic_distance)) +
geom_jitter(width = 0.25)
summary(lmer(semantic_distance ~ mean_sim + (1 | internal_id) + (1 | song_id),
data_factor))
summary(glmer(content ~ mean_sim + (1 | internal_id) + (1 | song_id),
data_factor, family = binomial))
ggplot(data_factor, aes(x = mean_sim, y = semantic_distance, color = content)) +
geom_point(alpha = 0.8)
data_factor %>%
filter(content == 'same') %>%
lmer(semantic_distance ~ mean_sim + (1 | internal_id) + (1 | song_id), .) %>%
summary()
data_factor %>%
filter(content == 'different') %>%
lmer(semantic_distance ~ mean_sim + (1 | internal_id) + (1 | song_id), .) %>%
summary()
data_by_song <- data_factor %>%
group_by(song_id, content) %>%
summarize(count = n()) %>%
pivot_wider(id_cols = song_id, names_from = content, values_from = count) %>%
mutate(different = ifelse(is.na(different), 0, different)) %>%
mutate(prop_same = same / (same + different))
data_by_song %<>%
left_join(., by_song, by = join_by(song_id))
summary(lm(prop_same ~ mean_sim, data_by_song))
ggplot(data_by_song, aes(x = mean_sim, y = prop_same)) +
geom_point() +
geom_smooth(method = "lm", color = 'black')
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
library(tidyverse)
library(magrittr)
library(lme4)
library(lmerTest)
data <- read_csv('../../data/processed/dense/joined_with_features/memory_all.csv')
data <- read_csv('../../data/processed/dense/joined_with_features/memory_all.csv')
View(data)
setwd("/Users/rcassan2/Documents/GitHub/cover_songs_for_pub_repo/data/scripts/dense/")
library(tidyverse)
library(magrittr)
all_memories <- read_csv('../../processed/dense/memory/all_memories.csv')
all_memory_embeddings <- read_csv('../../processed/dense/memory/all_memory_embeddings.csv')
# load the feature files
feat_diffs <- read_csv('../../processed/dense/joined_with_features/similarity_and_scaled_feature_differences.csv')
feats <- read_csv('../../processed/dense/joined_with_features/all_features_scaled.csv')
all_mems <- feats %>%
# have to do some name repair first
separate_wider_delim(song_id, delim = '_',
names = c('year', 'rank', 'orig_or_cover')) %>%
# reconstruct the song_id column
mutate(song_id = paste(year, rank, sep = '_')) %>%
relocate(song_id) %>%
mutate(year = NULL,
rank = NULL) %>%
mutate(orig_or_cover = ifelse(orig_or_cover == 'Original5S', 'orig', 'cover')) %>%
left_join(all_memory_embeddings, ., by = join_by(song_id, orig_or_cover)) %>%
relocate(c(772:798), .after = orig_or_cover)
all_mem_emb <- feats %>%
# have to do some name repair first
separate_wider_delim(song_id, delim = '_',
names = c('year', 'rank', 'orig_or_cover')) %>%
# reconstruct the song_id column
mutate(song_id = paste(year, rank, sep = '_')) %>%
relocate(song_id) %>%
mutate(year = NULL,
rank = NULL) %>%
mutate(orig_or_cover = ifelse(orig_or_cover == 'Original5S', 'orig', 'cover')) %>%
left_join(all_memory_embeddings, ., by = join_by(song_id, orig_or_cover)) %>%
relocate(c(772:798), .after = orig_or_cover)
write_csv(all_mem_emb, '../../processed/dense/joined_with_features/memory_all_embeddings.csv')
all_mem <- feats %>%
# have to do some name repair first
separate_wider_delim(song_id, delim = '_',
names = c('year', 'rank', 'orig_or_cover')) %>%
# reconstruct the song_id column
mutate(song_id = paste(year, rank, sep = '_')) %>%
relocate(song_id) %>%
mutate(year = NULL,
rank = NULL) %>%
mutate(orig_or_cover = ifelse(orig_or_cover == 'Original5S', 'orig', 'cover')) %>%
left_join(all_memories, ., by = join_by(song_id, orig_or_cover))
View(all_mem)
write_csv(all_mem, '../../processed/dense/joined_with_features/memory_all.csv')
data <- read_csv('../../data/processed/dense/joined_with_features/memory_all.csv')
View(data)
ggplot(data, aes(mean_valence, emot_content)) +
geom_point()
levels(data$emot_content)
common_rating <- c('not at all', 'a little', 'somewhat', 'very', 'extremely')
data_factor <- data %>%
mutate(emot_content = factor(emot_content,
levels = c('very negative','somewhat negative',
'neutral','somewhat positive',
'very positive'),
ordered = TRUE),
emot_intensity = factor(emot_intensity,
levels = common_rating,
ordered = TRUE),
energetic = factor(energetic,
levels = common_rating,
ordered = TRUE)
)
ggplot(data_factor, aes(mean_valence, emot_content)) +
geom_point()
ggplot(data_factor, aes(mean_valence, emot_content)) +
geom_jitter()
ggplot(data_factor, aes(mean_valence, emot_content)) +
geom_jitter(width = 0)
ggplot(data_factor, aes(mean_valence, emot_content)) +
geom_jitter(width = 0) +
geom_smooth(method = 'lm')
ggplot(data_factor, aes(mean_valence, emot_content)) +
geom_jitter(width = 0)
ggplot(data_factor, aes(mean_valence, numeric(emot_content))) +
geom_jitter(width = 0)
ggplot(data_factor, aes(mean_valence, as.numeric(emot_content))) +
geom_jitter(width = 0) +
geom_smooth()
ggplot(data_factor, aes(mean_valence, as.numeric(emot_content))) +
geom_jitter(width = 0) +
geom_smooth(method = 'lm')
summary(lm(emot_content ~ mean_valence, data_factor))
summary(lm(as.numeric(emot_content) ~ mean_valence, data_factor))
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
library(tidyverse)
library(magrittr)
library(lme4)
library(lmerTest)
data <- read_csv('../../data/processed/dense/joined_with_features/memory_all.csv')
common_rating <- c('not at all', 'a little', 'somewhat', 'very', 'extremely')
data_factor <- data %>%
mutate(emot_content = factor(emot_content,
levels = c('very negative','somewhat negative',
'neutral','somewhat positive',
'very positive'),
ordered = TRUE),
emot_intensity = factor(emot_intensity,
levels = common_rating,
ordered = TRUE),
energetic = factor(energetic,
levels = common_rating,
ordered = TRUE)
)
summary(lm(as.numeric(emot_content) ~ mean_valence, data_factor))
ggplot(data_factor, aes(mean_valence, as.numeric(emot_content))) +
geom_jitter(width = 0) +
geom_smooth(method = 'lm')
summary(lm(as.numeric(emot_content) ~ mean_arousal, data_factor))
ggplot(data_factor, aes(mean_arousal, as.numeric(emot_content))) +
geom_jitter(width = 0) +
geom_smooth(method = 'lm')
summary(lm(as.numeric(emot_intensity) ~ mean_valence, data_factor))
ggplot(data_factor, aes(mean_valence, as.numeric(emot_intensity))) +
geom_jitter(width = 0) +
geom_smooth(method = 'lm')
summary(lm(as.numeric(emot_intensity) ~ mean_arousal, data_factor))
ggplot(data_factor, aes(mean_arousal, as.numeric(emot_intensity))) +
geom_jitter(width = 0) +
geom_smooth(method = 'lm')
summary(lm(as.numeric(energy) ~ mean_valence, data_factor))
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
library(tidyverse)
library(magrittr)
library(lme4)
library(lmerTest)
data <- read_csv('../../data/processed/dense/joined_with_features/memory_all.csv')
common_rating <- c('not at all', 'a little', 'somewhat', 'very', 'extremely')
data_factor <- data %>%
mutate(emot_content = factor(emot_content,
levels = c('very negative','somewhat negative',
'neutral','somewhat positive',
'very positive'),
ordered = TRUE),
emot_intensity = factor(emot_intensity,
levels = common_rating,
ordered = TRUE),
energetic = factor(energetic,
levels = common_rating,
ordered = TRUE)
)
summary(lm(as.numeric(emot_content) ~ mean_valence, data_factor))
ggplot(data_factor, aes(mean_valence, as.numeric(emot_content))) +
geom_jitter(width = 0) +
geom_smooth(method = 'lm')
summary(lm(as.numeric(emot_content) ~ mean_arousal, data_factor))
ggplot(data_factor, aes(mean_arousal, as.numeric(emot_content))) +
geom_jitter(width = 0) +
geom_smooth(method = 'lm')
summary(lm(as.numeric(emot_intensity) ~ mean_valence, data_factor))
ggplot(data_factor, aes(mean_valence, as.numeric(emot_intensity))) +
geom_jitter(width = 0) +
geom_smooth(method = 'lm')
summary(lm(as.numeric(emot_intensity) ~ mean_arousal, data_factor))
ggplot(data_factor, aes(mean_arousal, as.numeric(emot_intensity))) +
geom_jitter(width = 0) +
geom_smooth(method = 'lm')
summary(lm(as.numeric(energetic) ~ mean_valence, data_factor))
ggplot(data_factor, aes(mean_valence, as.numeric(energetic))) +
geom_jitter(width = 0) +
geom_smooth(method = 'lm')
summary(lm(as.numeric(energetic) ~ mean_arousal, data_factor))
ggplot(data_factor, aes(mean_arousal, as.numeric(energetic))) +
geom_jitter(width = 0) +
geom_smooth(method = 'lm')
View(data_factor)
summary(lmer(as.numeric(emot_content) ~ mean_valence + (1|internal_id) + (1|song_id), data_factor))
summary(lmer(as.numeric(emot_content) ~ mean_arousal + (1|internal_id) + (1|song_id), data_factor))
summary(lmer(as.numeric(emot_intensity) ~ mean_valence + (1|internal_id) + (1|song_id), data_factor))
summary(lmer(as.numeric(emot_intensity) ~ mean_arousal + (1|internal_id) + (1|song_id), data_factor))
summary(lmer(as.numeric(energetic) ~ mean_valence + (1|internal_id) + (1|song_id), data_factor))
summary(lmer(as.numeric(energetic) ~ mean_arousal + (1|internal_id) + (1|song_id), data_factor))
summary(lmer(as.numeric(energetic) ~ mean_valence*mean_arousal + (1|internal_id) + (1|song_id), data_factor))
summary(lmer(as.numeric(emot_content) ~ mean_valence*mean_arousal + (1|internal_id) + (1|song_id), data_factor))
summary(lmer(as.numeric(emot_intensity) ~ mean_valence*mean_arousal + (1|internal_id) + (1|song_id), data_factor))
summary(lmer(as.numeric(emot_content) ~ tempo + (1|internal_id) + (1|song_id), data_factor))
summary(lmer(as.numeric(emot_intensity) ~ tempo + (1|internal_id) + (1|song_id), data_factor))
summary(lmer(as.numeric(energetic) ~ tempo + (1|internal_id) + (1|song_id), data_factor))
ggplot(data_factor, aes(tempo, as.numeric(energetic))) +
geom_jitter(width = 0) +
geom_smooth(method = 'lm')
ggplot(data_factor, aes(tempo, as.numeric(emot_intensity))) +
geom_jitter(width = 0) +
geom_smooth(method = 'lm')
ggplot(data_factor, aes(tempo, as.numeric(emot_content))) +
geom_jitter(width = 0) +
geom_smooth(method = 'lm')
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
library(tidyverse)
library(magrittr)
library(lme4)
library(lmerTest)
data <- read_csv('../../data/processed/dense/joined_with_features/memory_original-w_or_wo_cover_memories.csv')
by_song <- read_csv('../../data/processed/dense/joined_with_features/similarity_and_scaled_feature_differences.csv')
summary(glmer(memory_cover ~ mean_sim + (1 | internal_id) + (1 | song_id),
data, family = binomial))
data_by_song <- data %>%
group_by(song_id, memory_cover) %>%
summarize(count = n()) %>%
pivot_wider(id_cols = song_id, names_from = memory_cover, values_from = count) %>%
mutate(likelihood = `TRUE` / (`TRUE` + `FALSE`)) %>%
left_join(., by_song, by = join_by(song_id))
summary(lm(likelihood ~ mean_sim, data_by_song))
summary(glmer(memory_cover ~ tempo_difference + (1 | internal_id) + (1 | song_id),
data, family = binomial))
summary(glmer(memory_cover ~ mfccs_dist + (1 | internal_id) + (1 | song_id),
data, family = binomial))
summary(glmer(memory_cover ~ key_difference + (1 | internal_id) + (1 | song_id),
data, family = binomial))
summary(glmer(memory_cover ~ voice_type_difference + (1 | internal_id) + (1 | song_id),
data, family = binomial))
summary(glmer(memory_cover ~ mean_valence_difference + (1 | internal_id) + (1 | song_id),
data, family = binomial))
summary(glmer(memory_cover ~ mean_arousal_difference + (1 | internal_id) + (1 | song_id),
data, family = binomial))
summary(lmer(as.numeric(emot_content) ~ mean_valence*mean_arousal + (1|internal_id) + (1|song_id), data_factor))
summary(lmer(as.numeric(emot_intensity) ~ mean_valence*mean_arousal + (1|internal_id) + (1|song_id), data_factor))
summary(lmer(as.numeric(energetic) ~ mean_valence*mean_arousal + (1|internal_id) + (1|song_id), data_factor))
View(data_by_song)
