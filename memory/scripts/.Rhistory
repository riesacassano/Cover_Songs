knitr::opts_chunk$set(echo = FALSE, message = FALSE)
ggplot(data_by_song, aes(mean_sim, likelihood)) +
geom_point() +
geom_smooth(method = "lm", color = 'black') +
xlab('mean similarity per song')
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
library(tidyverse)
library(magrittr)
library(lme4)
library(lmerTest)
data <- read_csv('../../data/processed/dense/joined_with_features/memory_original-w_or_wo_cover_memories.csv')
by_song <- read_csv('../../data/processed/dense/joined_with_features/similarity_and_scaled_feature_differences.csv')
summary(glmer(memory_cover ~ mean_sim + (1 | internal_id) + (1 | song_id),
data, family = binomial))
data_by_song <- data %>%
group_by(song_id, memory_cover) %>%
summarize(count = n()) %>%
pivot_wider(id_cols = song_id, names_from = memory_cover, values_from = count) %>%
mutate(likelihood = `TRUE` / (`TRUE` + `FALSE`)) %>%
left_join(., by_song, by = join_by(song_id))
summary(lm(likelihood ~ mean_sim, data_by_song))
summary(glmer(memory_cover ~ tempo_difference + (1 | internal_id) + (1 | song_id),
data, family = binomial))
summary(glmer(memory_cover ~ mfccs_dist + (1 | internal_id) + (1 | song_id),
data, family = binomial))
summary(glmer(memory_cover ~ key_difference + (1 | internal_id) + (1 | song_id),
data, family = binomial))
summary(glmer(memory_cover ~ voice_type_difference + (1 | internal_id) + (1 | song_id),
data, family = binomial))
summary(glmer(memory_cover ~ mean_valence_difference + (1 | internal_id) + (1 | song_id),
data, family = binomial))
summary(glmer(memory_cover ~ mean_arousal_difference + (1 | internal_id) + (1 | song_id),
data, family = binomial))
summary(lm(likelihood ~ tempo_difference, data_by_song))
summary(lm(likelihood ~ mfccs_dist, data_by_song))
summary(lm(likelihood ~ key_difference, data_by_song))
summary(lm(likelihood ~ voice_type_difference, data_by_song))
summary(lm(likelihood ~ mean_valence_difference, data_by_song))
summary(lm(likelihood ~ mean_arousal_difference, data_by_song))
# testing - manipulate to make sure plotting function is working
data %>%
mutate(test_similarity = ifelse(memory_cover, mean_sim + 2, mean_sim)) %>%
mutate(memory_cover.int = ifelse(memory_cover == 1, 1, 0)) %>%
ggplot(aes(test_similarity, memory_cover.int)) +
geom_point() +
geom_jitter(width = 0, height = 0.1, alpha = 0.5) +
xlab('FAKE similarity (for testing)') +
ylab('memory evoked for cover') +
stat_smooth(method = 'glm', color = 'black',
method.args = list(family = binomial))
data %>%
mutate(memory_cover.int = ifelse(memory_cover == 1, 1, 0)) %>%
ggplot(aes(mean_sim, memory_cover.int)) +
geom_jitter(width = 0, height = 0.1, alpha = 0.5) +
xlab('mean similarity') +
ylab('memory evoked for cover') +
stat_smooth(method = 'glm', color = 'black',
method.args = list(family = binomial))
data %>%
mutate(memory_cover.int = ifelse(memory_cover == 1, 1, 0)) %>%
ggplot(aes(tempo_difference, memory_cover.int)) +
geom_jitter(width = 0, height = 0.1, alpha = 0.5) +
xlab('tempo difference') +
ylab('memory evoked for cover') +
stat_smooth(method = 'glm', color = 'black',
method.args = list(family = binomial))
data %>%
mutate(memory_cover.int = ifelse(memory_cover == 1, 1, 0)) %>%
ggplot(aes(voice_type_difference, memory_cover.int)) +
geom_jitter(width = 0.1, height = 0.1, alpha = 0.5) +
xlab('voice type difference') +
ylab('memory evoked for cover') +
stat_smooth(method = 'glm', color = 'black',
method.args = list(family = binomial))
ggplot(data_by_song, aes(mean_sim, likelihood)) +
geom_point() +
geom_smooth(method = "lm", color = 'black') +
xlab('mean similarity per song')
ggsave('../figures/similarity_likelihood.png', width = 7, height = 5)
ggplot(data_by_song, aes(tempo_difference, likelihood)) +
geom_point() +
geom_smooth(method = "lm", color = 'black') +
xlab('tempo difference per song')
ggsave('../figures/tempo_likelihood.png', width = 7, height = 5)
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
ggplot(data_by_song_control, aes(x = mean_sim, y = avg_control_diff)) +
geom_point() +
geom_smooth(method = "lm", color = 'black') +
xlab('mean similarity per song') +
ylab('average difference in memory degree of control per song\n(how spontaneously it was retrieved)')
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
library(tidyverse)
library(magrittr)
library(lme4)
library(lmerTest)
data <- read_csv('../../data/processed/dense/joined_with_features/memory_pairs.csv')
by_song <- read_csv('../../data/processed/dense/joined_with_features/similarity_and_scaled_feature_differences.csv')
ggplot(data, aes(x = mean_sim, y = control_diff)) +
geom_point(alpha = 0.5)
ggplot(data, aes(x = mean_sim, y = vivid_diff)) +
geom_point(alpha = 0.5)
ggplot(data, aes(x = mean_sim, y = abs(control_diff))) +
geom_point(alpha = 0.5)
ggplot(data, aes(x = mean_sim, y = abs(vivid_diff))) +
geom_point(alpha = 0.5)
summary(lmer(control_diff ~ mean_sim + (1 | internal_id) + (1 | song_id),
data))
summary(lmer(vivid_diff ~ mean_sim + (1 | internal_id) + (1 | song_id),
data))
data_by_song_vividness <- data %>%
group_by(song_id) %>%
summarize(avg_vivid_diff = mean(vivid_diff))
data_by_song_control <- data %>%
group_by(song_id) %>%
summarize(avg_control_diff = mean(control_diff))
data_by_song_vividness %<>%
left_join(., by_song, by = join_by(song_id))
data_by_song_control %<>%
left_join(., by_song, by = join_by(song_id))
summary(lm(avg_vivid_diff ~ mean_sim, data_by_song_vividness))
ggplot(data_by_song_vividness, aes(x = mean_sim, y = avg_vivid_diff)) +
geom_point() +
geom_smooth(method = "lm", color = 'black')
summary(lm(avg_control_diff ~ mean_sim, data_by_song_control))
ggplot(data_by_song_control, aes(x = mean_sim, y = avg_control_diff)) +
geom_point() +
geom_smooth(method = "lm", color = 'black') +
xlab('mean similarity per song') +
ylab('average difference in memory degree of control per song\n(how spontaneously it was retrieved)')
ggplot(data_by_song_control, aes(x = mean_sim, y = avg_control_diff)) +
geom_point() +
geom_smooth(method = "lm", color = 'black') +
xlab('mean similarity per song') +
ylab('average difference in memory degree of control per song\n(how spontaneously it was retrieved)')
ggsave('../figures/similarity_control.png', width = 7, height = 5)
ggplot(data_by_song_vividness, aes(x = mean_sim, y = avg_vivid_diff)) +
geom_point() +
geom_smooth(method = "lm", color = 'black') +
xlab('mean similarity per song') +
ylab('average difference in memory vividness')
ggsave('../figures/similarity_vividness.png', width = 7, height = 5)
View(data_by_song_control)
data_by_song_vividness <- data %>%
group_by(song_id) %>%
summarize(avg_vivid_diff = mean(vivid_diff),
count = n())
data_by_song_control <- data %>%
group_by(song_id) %>%
summarize(avg_control_diff = mean(control_diff))
View(data_by_song_control)
View(data_by_song_vividness)
data_by_song_vividness <- data %>%
group_by(song_id) %>%
summarize(avg_vivid_diff = mean(vivid_diff),
count = n())
data_by_song_control <- data %>%
group_by(song_id) %>%
summarize(avg_control_diff = mean(control_diff),
count = n())
data_by_song_vividness %<>%
left_join(., by_song, by = join_by(song_id))
data_by_song_control %<>%
left_join(., by_song, by = join_by(song_id))
summary(lm(avg_vivid_diff ~ mean_sim + count, data_by_song_vividness))
summary(lm(avg_vivid_diff ~ mean_sim + count, data_by_song_vividness))
summary(lm(avg_control_diff ~ mean_sim + count, data_by_song_control))
ggplot(data_by_song_vividness, aes(x = mean_sim, y = avg_vivid_diff, size = count)) +
geom_point() +
geom_smooth(method = "lm", color = 'black') +
xlab('mean similarity per song') +
ylab('average difference in memory vividness')
#ggsave('../figures/similarity_vividness.png', width = 7, height = 5)
ggplot(data_by_song_vividness, aes(x = mean_sim, y = avg_vivid_diff)) +
geom_point(aes(size = count)) +
geom_smooth(method = "lm", color = 'black') +
xlab('mean similarity per song') +
ylab('average difference in memory vividness')
#ggsave('../figures/similarity_vividness.png', width = 7, height = 5)
ggplot(data_by_song_vividness, aes(x = mean_sim, y = avg_vivid_diff)) +
geom_point(aes(size = count), alpha = 0.5) +
geom_smooth(method = "lm", color = 'black') +
xlab('mean similarity per song') +
ylab('average difference in memory vividness')
#ggsave('../figures/similarity_vividness.png', width = 7, height = 5)
ggplot(data_by_song_vividness, aes(x = mean_sim, y = avg_vivid_diff)) +
geom_point(aes(size = count), alpha = 0.75) +
geom_smooth(method = "lm", color = 'black') +
xlab('mean similarity per song') +
ylab('average difference in memory vividness')
#ggsave('../figures/similarity_vividness.png', width = 7, height = 5)
ggplot(data_by_song_control, aes(x = mean_sim, y = avg_control_diff)) +
geom_point(aes(size = count), alpha = 0.75) +
geom_smooth(method = "lm", color = 'black') +
xlab('mean similarity per song') +
ylab('average difference in memory degree of control per song\n(how spontaneously it was retrieved)')
#ggsave('../figures/similarity_control.png', width = 7, height = 5)
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
ggplot(data_by_song, aes(mean_sim, likelihood)) +
geom_point() +
geom_smooth(method = "lm", color = 'black') +
theme_bw()
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
library(tidyverse)
library(magrittr)
library(lme4)
library(lmerTest)
data <- read_csv('../../data/processed/dense/joined_with_features/memory_original-w_or_wo_cover_memories.csv')
by_song <- read_csv('../../data/processed/dense/joined_with_features/similarity_and_scaled_feature_differences.csv')
summary(glmer(memory_cover ~ mean_sim + (1 | internal_id) + (1 | song_id),
data, family = binomial))
data_by_song <- data %>%
group_by(song_id, memory_cover) %>%
summarize(count = n()) %>%
pivot_wider(id_cols = song_id, names_from = memory_cover, values_from = count) %>%
mutate(likelihood = `TRUE` / (`TRUE` + `FALSE`)) %>%
left_join(., by_song, by = join_by(song_id))
summary(lm(likelihood ~ mean_sim, data_by_song))
summary(glmer(memory_cover ~ tempo_difference + (1 | internal_id) + (1 | song_id),
data, family = binomial))
summary(glmer(memory_cover ~ mfccs_dist + (1 | internal_id) + (1 | song_id),
data, family = binomial))
summary(glmer(memory_cover ~ key_difference + (1 | internal_id) + (1 | song_id),
data, family = binomial))
summary(glmer(memory_cover ~ voice_type_difference + (1 | internal_id) + (1 | song_id),
data, family = binomial))
summary(glmer(memory_cover ~ mean_valence_difference + (1 | internal_id) + (1 | song_id),
data, family = binomial))
summary(glmer(memory_cover ~ mean_arousal_difference + (1 | internal_id) + (1 | song_id),
data, family = binomial))
summary(lm(likelihood ~ tempo_difference, data_by_song))
summary(lm(likelihood ~ mfccs_dist, data_by_song))
summary(lm(likelihood ~ key_difference, data_by_song))
summary(lm(likelihood ~ voice_type_difference, data_by_song))
summary(lm(likelihood ~ mean_valence_difference, data_by_song))
summary(lm(likelihood ~ mean_arousal_difference, data_by_song))
# testing - manipulate to make sure plotting function is working
data %>%
mutate(test_similarity = ifelse(memory_cover, mean_sim + 2, mean_sim)) %>%
mutate(memory_cover.int = ifelse(memory_cover == 1, 1, 0)) %>%
ggplot(aes(test_similarity, memory_cover.int)) +
geom_point() +
geom_jitter(width = 0, height = 0.1, alpha = 0.5) +
xlab('FAKE similarity (for testing)') +
ylab('memory evoked for cover') +
stat_smooth(method = 'glm', color = 'black',
method.args = list(family = binomial))
data %>%
mutate(memory_cover.int = ifelse(memory_cover == 1, 1, 0)) %>%
ggplot(aes(mean_sim, memory_cover.int)) +
geom_jitter(width = 0, height = 0.1, alpha = 0.5) +
xlab('mean similarity') +
ylab('memory evoked for cover') +
stat_smooth(method = 'glm', color = 'black',
method.args = list(family = binomial))
data %>%
mutate(memory_cover.int = ifelse(memory_cover == 1, 1, 0)) %>%
ggplot(aes(tempo_difference, memory_cover.int)) +
geom_jitter(width = 0, height = 0.1, alpha = 0.5) +
xlab('tempo difference') +
ylab('memory evoked for cover') +
stat_smooth(method = 'glm', color = 'black',
method.args = list(family = binomial))
data %>%
mutate(memory_cover.int = ifelse(memory_cover == 1, 1, 0)) %>%
ggplot(aes(voice_type_difference, memory_cover.int)) +
geom_jitter(width = 0.1, height = 0.1, alpha = 0.5) +
xlab('voice type difference') +
ylab('memory evoked for cover') +
stat_smooth(method = 'glm', color = 'black',
method.args = list(family = binomial))
ggplot(data_by_song, aes(mean_sim, likelihood)) +
geom_point() +
geom_smooth(method = "lm", color = 'black') +
theme_bw()
xlab('mean similarity per song')
#ggsave('../figures/similarity_likelihood.png', width = 7, height = 5)
ggplot(data_by_song, aes(mean_sim, likelihood)) +
geom_point() +
geom_smooth(method = "lm", color = 'black') +
theme_light() +
xlab('mean similarity per song')
ggsave('../figures/similarity_likelihood.png', width = 7, height = 5)
ggplot(data_by_song, aes(mean_sim, likelihood)) +
geom_point() +
geom_smooth(method = "lm", color = 'black') +
theme_light() +
xlab('mean similarity per song') +
ylab('likelihood of cover memory')
ggsave('../figures/similarity_likelihood.png', width = 7, height = 5)
ggplot(data_by_song, aes(tempo_difference, likelihood)) +
geom_point() +
geom_smooth(method = "lm", color = 'black') +
theme_light() +
xlab('tempo difference per song') +
ylab('likelihood of cover memory')
ggsave('../figures/tempo_likelihood.png', width = 7, height = 5)
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
ggplot(data_by_song_control, aes(x = mean_sim, y = avg_control_diff)) +
#geom_point(aes(size = count), alpha = 0.75) +
geom_point() +
geom_smooth(method = "lm", color = 'black') +
theme_light()
xlab('mean similarity per song') +
ylab('average difference in memory degree of control per song\n(how spontaneously it was retrieved)')
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
library(tidyverse)
library(magrittr)
library(lme4)
library(lmerTest)
data <- read_csv('../../data/processed/dense/joined_with_features/memory_pairs.csv')
by_song <- read_csv('../../data/processed/dense/joined_with_features/similarity_and_scaled_feature_differences.csv')
ggplot(data, aes(x = mean_sim, y = control_diff)) +
geom_point(alpha = 0.5)
ggplot(data, aes(x = mean_sim, y = vivid_diff)) +
geom_point(alpha = 0.5)
ggplot(data, aes(x = mean_sim, y = abs(control_diff))) +
geom_point(alpha = 0.5)
ggplot(data, aes(x = mean_sim, y = abs(vivid_diff))) +
geom_point(alpha = 0.5)
summary(lmer(control_diff ~ mean_sim + (1 | internal_id) + (1 | song_id),
data))
summary(lmer(vivid_diff ~ mean_sim + (1 | internal_id) + (1 | song_id),
data))
data_by_song_vividness <- data %>%
group_by(song_id) %>%
summarize(avg_vivid_diff = mean(vivid_diff),
count = n())
data_by_song_control <- data %>%
group_by(song_id) %>%
summarize(avg_control_diff = mean(control_diff),
count = n())
data_by_song_vividness %<>%
left_join(., by_song, by = join_by(song_id))
data_by_song_control %<>%
left_join(., by_song, by = join_by(song_id))
summary(lm(avg_vivid_diff ~ mean_sim, data_by_song_vividness))
ggplot(data_by_song_vividness, aes(x = mean_sim, y = avg_vivid_diff)) +
geom_point(aes(size = count), alpha = 0.75) +
geom_smooth(method = "lm", color = 'black') +
xlab('mean similarity per song') +
ylab('average difference in memory vividness')
#ggsave('../figures/similarity_vividness.png', width = 7, height = 5)
summary(lm(avg_control_diff ~ mean_sim, data_by_song_control))
ggplot(data_by_song_control, aes(x = mean_sim, y = avg_control_diff)) +
#geom_point(aes(size = count), alpha = 0.75) +
geom_point() +
geom_smooth(method = "lm", color = 'black') +
theme_light() +
xlab('mean similarity per song') +
ylab('average difference in memory degree of control per song\n(how spontaneously it was retrieved)')
#ggsave('../figures/similarity_control.png', width = 7, height = 5)
ggplot(data_by_song_control, aes(x = mean_sim, y = avg_control_diff)) +
#geom_point(aes(size = count), alpha = 0.75) +
geom_point() +
geom_smooth(method = "lm", color = 'black') +
geom_hline(aes(xintercept = 0)) +
theme_light() +
xlab('mean similarity per song') +
ylab('average difference in memory degree of control per song\n(how spontaneously it was retrieved)')
ggplot(data_by_song_control, aes(x = mean_sim, y = avg_control_diff)) +
#geom_point(aes(size = count), alpha = 0.75) +
geom_point() +
geom_smooth(method = "lm", color = 'black') +
geom_hline(aes(yintercept = 0)) +
theme_light() +
xlab('mean similarity per song') +
ylab('average difference in memory degree of control per song\n(how spontaneously it was retrieved)')
#ggsave('../figures/similarity_control.png', width = 7, height = 5)
ggplot(data_by_song_control, aes(x = mean_sim, y = avg_control_diff)) +
#geom_point(aes(size = count), alpha = 0.75) +
geom_point() +
geom_smooth(method = "lm", color = 'black') +
geom_hline(aes(yintercept = 0)) +
theme_light() +
xlab('mean similarity per song') +
ylab('average difference in memory degree of control per song\n(how spontaneously it was retrieved)')
ggsave('../figures/similarity_control.png', width = 7, height = 5)
ggplot(data_by_song_vividness, aes(x = mean_sim, y = avg_vivid_diff)) +
geom_point() +
#geom_point(aes(size = count), alpha = 0.75) +
geom_smooth(method = "lm", color = 'black') +
geom_hline(aes(yintercept = 0)) +
theme_light() +
xlab('mean similarity per song') +
ylab('average difference in memory vividness')
#ggsave('../figures/similarity_vividness.png', width = 7, height = 5)
ggplot(data_by_song_vividness, aes(x = mean_sim, y = avg_vivid_diff)) +
geom_point() +
#geom_point(aes(size = count), alpha = 0.75) +
geom_smooth(method = "lm", color = 'black') +
geom_hline(aes(yintercept = 0)) +
theme_light() +
xlab('mean similarity per song') +
ylab('average difference in memory vividness')
ggsave('../figures/similarity_vividness.png', width = 7, height = 5)
